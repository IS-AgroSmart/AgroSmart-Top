version: '3'
services:
    nginx:
        image: nginx
        container_name: container-nginx
        #network_mode: host
        ports:
            - "80:80"
        volumes: 
            - ${PREFIX}/nginx:/etc/nginx
            - ${PREFIX}/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ${PREFIX}/app/staticfiles:/static
        depends_on: 
            - django
            - nodeodm
            - geoserver
            - vue
    geoserver:
        image: mxabierto/boundless-suite:efeabbd1a9afe9080acb5176c66ac4ec06408bb0
        #image: kartoza/geoserver
        container_name: container-geoserver
        #network_mode: host
        ports:
            - "8080:8080"
        volumes: 
            - ${PREFIX}/flights:/media/input
            - ${PREFIX}/projects:/media/USB
            - geoserver_data:/opt/geoserver/data_dir
        environment:
            - GEOSERVER_DATA_DIR=/opt/geoserver/data_dir
            - JAVA_OPTS=-Xms320m -Xmx750m -XX:SoftRefLRUPolicyMSPerMB=36000 -XX:-UsePerfData -Dorg.geotools.referencing.forceXY=true -Dorg.geotoools.render.lite.scale.unitCompensation=true -Xbootclasspath/a:/usr/local/tomcat/lib/marlin-0.7.3-Unsafe.jar -Dsun.java2d.renderer=org.marlin.pisces.PiscesRenderingEngine -Dsun.java2d.renderer.useThreadLocal=false -Djava.library.path=/usr/lib:/usr/lib/jni:/opt/libjpeg-turbo/lib64:/usr/lib64 -Xbootclasspath/a:/opt/tomcat/lib/marlin-0.7.3-Unsafe.jar -Dsun.java2d.renderer=org.marlin.pisces.PiscesRenderingEngine -Dsun.java2d.renderer.useThreadLocal=false -server -Duser.timezone=GMT -Dorg.geotools.shapefile.datetime=true
    nodeodm:
        image: opendronemap/nodeodm
        container_name: container-nodeodm
        #network_mode: host
        ports:
            - "3000:3000"
        volumes:
            - ${PREFIX}/flights:/var/www/data
        command: --log_level=silly --cleanup_tasks_after=525960000000 --parallel_queue_processing=10
    mysql:
        image: mysql
        container_name: container-mysql
        #network_mode: host
        volumes: 
            - ${PREFIX}/mysql:/var/lib/mysql
        command: --default-authentication-plugin=mysql_native_password
        environment:
            MYSQL_ROOT_PASSWORD: example
    vue:
        build: 
            context: ${PREFIX}/app/frontend
            dockerfile: Dockerfile
        container_name: container-vue
        #network_mode: host
        ports:
            - "8001:8001"
        volumes:
            - ${PREFIX}/app/frontend:/app
    django:
        build:
            context: ${PREFIX}/app
            dockerfile: Dockerfile
        container_name: container-django
        #network_mode: host
        ports:
            - "8000:8000"

        volumes:
            - ${PREFIX}/app:/app
            - ${PREFIX}/flights:/flights
            - ${PREFIX}/projects:/projects
        depends_on:
            - mysql
    prometheus:
        image: prom/prometheus:v2.1.0
        container_name: container-prometheus
        volumes:
          - ./prometheus/:/etc/prometheus/
          - prometheus_data:/prometheus
        command:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
          - '--web.route-prefix=/'
          - '--web.external-url=http://flysensorec.com/prometheus'
        ports:
          - "9090:9090"
        links:
          - cadvisor:cadvisor
        depends_on:
          - cadvisor
        restart: always
    node-exporter:
        image: prom/node-exporter
        container_name: container-node-exporter
        volumes:
          - /proc:/host/proc:ro
          - /sys:/host/sys:ro
          - /:/rootfs:ro
        command: 
          - '--path.procfs=/host/proc' 
          - '--path.sysfs=/host/sys'
          - --collector.filesystem.ignored-mount-points
          - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
        expose:
          - 9100
        restart: always
    cadvisor:
        image: google/cadvisor
        container_name: container-cadvisor
        volumes:
          - /:/rootfs:ro
          - /var/run:/var/run:rw
          - /sys:/sys:ro
          - /var/lib/docker/:/var/lib/docker:ro
        expose:
          - 8080
        restart: always
#    duckdns:
#        image: linuxserver/duckdns
#        network_mode: host
#        container_name: duckdns
#        environment:
#          - TZ=America/Guayaquil
#          - SUBDOMAINS=droneapp
#          - TOKEN=${DUCKDNSTOKEN}
#        restart: unless-stopped
#    letsencrypt:
#        image: linuxserver/letsencrypt
#        container_name: letsencrypt
#        network_mode: host
#        cap_add:
#          - NET_ADMIN
#        environment:
#          - PUID=1000
#          - PGID=1000
#          - TZ=America/Guayaquil
#          - URL=droneapp.duckdns.org
#          - VALIDATION=duckdns
#          - DUCKDNSTOKEN=${DUCKDNSTOKEN}
#          - EMAIL=${LETSENCRYPT_EMAIL}
#          - DHLEVEL=2048 #optional
#          - ONLY_SUBDOMAINS=false #optional
#        volumes:
#          - ${PREFIX}/letsencrypt:/config
#        ports:
#          - 443:443
#          - 80:80 #optional
#        restart: unless-stopped
volumes:
    geoserver_data:
    prometheus_data:
